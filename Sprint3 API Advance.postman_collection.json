{
	"info": {
		"_postman_id": "5f822ad7-1037-44dd-a6da-82b6305a9e79",
		"name": "Sprint3 API Advance",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27826974"
	},
	"item": [
		{
			"name": "User API",
			"item": [
				{
					"name": "Sign In",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion-check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const SigninSchema ={\r",
									"    \"type\": \"object\",\r",
									"    \"default\": {},\r",
									"    \"isSuccess\": { \"type\": \"boolean\" },\r",
									"        \"token\": { \"type\": \"string\" },\r",
									"     }\r",
									"//Assertion - Validate JsonSchema     \r",
									"pm.test(\"Validate SignInschema\", () => {\r",
									"            pm.response.to.have.jsonSchema(SigninSchema);\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"// Assertion - Validate User Authentication\r",
									"pm.test(\"Validate User Authentication\", function () {\r",
									" var response = pm.response.json();\r",
									"if (response.isSuccess){\r",
									"pm.environment.set(\"authToken\", response.token.token)\r",
									"}\r",
									"else {\r",
									" pm.expect(response).to.have.property(\"errorMessage\").and.be.a(\"string\");\r",
									"  }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rememberMe\": false,\r\n  \"email\": \"sweety1@gmail.com\",\r\n  \"password\": \"Password1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/signin",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Language API",
			"item": [
				{
					"name": "Add Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion-Check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const AddLanguageSchema ={\r",
									"\"type\": \"object\",\r",
									"       \"success\": {\"type\": \"boolean\"},\r",
									"        \"id\": {\"type\": \"string\"},  \r",
									"        \"message\":{\"type\":\"string\"},        \r",
									"      \r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate AddLanguageSchema\", () => {\r",
									"            pm.response.to.have.jsonSchema(AddLanguageSchema);\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"//Assertion - Validate language add\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode == 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: language added successfully\r",
									"pm.test(\"Language added successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"pm.environment.set(\"LanguageId\", response.id);\r",
									"})\r",
									"   } \r",
									"   else if (message == \"This language is already exist in your language list.\") {\r",
									"   // Negative case: language already exists\r",
									" pm.test(\"Duplicate language\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"This language is already exist in your language list.\");\r",
									"});\r",
									"\t}\r",
									"\t} else if (statusCode == 401) {\r",
									"// Unauthorized: unable to add language without authentication\r",
									"pm.test(\"Unable to add language without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									"Â });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Lang44\",\r\n  \"level\": \"Fluent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ProfileUrl}}/addLanguage",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"addLanguage"
							]
						}
					},
					"response": [
						{
							"name": "Add Language",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Lang3\",\r\n  \"level\": \"Fluent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addLanguage",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Duplicate Add Language",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Lang4\",\r\n  \"level\": \"Basic\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addLanguage",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Negative Add Language",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"\",\r\n  \"level\": \"Choose Language Level\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addLanguage",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Language with special character",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"@!*^$$#@#\",\r\n  \"level\": \"Fluent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addLanguage",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Language with numbers",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"11223344\",\r\n  \"level\": \"Fluent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:60190/profile/profile/addLanguage",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "60190",
									"path": [
										"profile",
										"profile",
										"addLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Update Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion-Check the ststus code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var UpdateLanguageSchema ={\r",
									"\"type\": \"object\",\r",
									"       \"success\": {\"type\": \"boolean\"},\r",
									"       \"message\":{\"type\":\"string\"},        \r",
									"      \r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate UpdateLanguageSchema\", () => {\r",
									"            pm.response.to.have.jsonSchema(UpdateLanguageSchema);\r",
									"});\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"//Assertion-Validate language update\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode == 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: language Updated successfully\r",
									"pm.test(\"Language Updated successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"pm.environment.get(\"LanguageId\");\r",
									"})\r",
									"   } \r",
									"   else if (message == \"This language is already exist in your language list.\") {\r",
									"   // Negative case: language already exists\r",
									" pm.test(\"Duplicate language\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"This language is already exist in your language list.\");\r",
									"});\r",
									"\t}\r",
									"\t} else if (statusCode == 401) {\r",
									"// Unauthorized: unable to add language without authentication\r",
									"pm.test(\"Unable to add language without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									"Â });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{LanguageId}}\",\r\n  \"name\": \"Lang56\",\r\n  \"level\": \"Fluent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ProfileUrl}}/updateLanguage",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"updateLanguage"
							]
						}
					},
					"response": [
						{
							"name": "Update Language",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6610a602db6e470001e28f17\",\r\n  \"name\": \"Lang555\",\r\n  \"level\": \"Fluent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateLanguage",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Duplicate Update Language",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6610a602db6e470001e28f17\",\r\n  \"name\": \"Lang555\",\r\n  \"level\": \"Fluent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateLanguage",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Update Language with specialcharacter",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6610a602db6e470001e28f17\",\r\n  \"name\": \"!@#$##\",\r\n  \"level\": \"Fluent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateLanguage",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Update Language with numbers",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6610a602db6e470001e28f17\",\r\n  \"name\": \"11223\",\r\n  \"level\": \"Fluent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateLanguage",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Negative Update Language",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"6610a602db6e470001e28f17\",\r\n  \"name\": \"\",\r\n  \"level\": \"Fluent\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateLanguage",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateLanguage"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Get Language List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion-Check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var LanguageList = {\r",
									"    \"type\":\"array\",\r",
									"    \"items\":{\r",
									"        \"type\":\"object\",\r",
									"        \"properties\":{\r",
									"            \"personLanguageId\":{\"type\":\"string\"},\r",
									"            \"language\":{\"type\":\"string\"},\r",
									"            \"languagelevel\":{\"type\":\"string\"}\r",
									"        }\r",
									"    } \r",
									"}\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate LanguageListSchema\", () => {\r",
									"            pm.response.to.have.jsonSchema(LanguageList);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"// Assertion - Validate successful retrieval of language list\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode == 200) {\r",
									"    pm.test(\"Retrieve list of languages successfully\", function () {\r",
									"        var response = pm.response.json();\r",
									"        pm.expect(response).to.be.an('array');\r",
									"    });\r",
									"} else if (statusCode == 401) {\r",
									"    // Unauthorized: unable to retrieve language list without authentication\r",
									"    pm.test(\"Unable to retrieve languages without authentication\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"Â Â Â Â });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ProfileUrl}}/getLanguage",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"getLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion - Check status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const DeleteLanguageSchema ={\r",
									"\"type\": \"object\",\r",
									"       \"success\": {\"type\": \"boolean\"},\r",
									"       \"language\":{\"type\":\"string\"},        \r",
									"};\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(DeleteLanguageSchema);\r",
									"}); \r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"// Assertion - Validate language deletion success\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    pm.test(\"Language deleted successfully\", function () {\r",
									"        var response = pm.response.json();\r",
									"        pm.expect(response.success).to.be.true;\r",
									"        pm.expect(response.language).to.exist;\r",
									"        \r",
									"    });\r",
									"}\r",
									"else {\r",
									"    var response = pm.response.json(); // Define response here to avoid ReferenceError\r",
									"    if (response.message === \"Error while deleting language Object reference not set to an instance of an object.\") {\r",
									"        pm.test(\"Negative Delete language\", function () {\r",
									"            pm.expect(response.success).to.be.false;\r",
									"            pm.expect(response.message).to.equal(\"Error while deleting language Object reference not set to an instance of an object.\");\r",
									"        });\r",
									"    }\r",
									"}\r",
									"// Assertion - Unable to delete language without authentication\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"Unable to Delete Language without User being Authenticated\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"    });\r",
									"}\r",
									"// Assertion - Negative cases for invalid and empty ID\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\"Negative - Delete Language Invalid Id\", function () {\r",
									"        pm.response.to.have.status(500);\r",
									"    });\r",
									"                    \r",
									"    pm.test(\"Negative - Delete Language Empty Id Field\", function () {\r",
									"        pm.response.to.have.status(500);\r",
									"Â Â Â Â });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"id\":\"{{LanguageId}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/deleteLanguage",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"deleteLanguage"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Skill API",
			"item": [
				{
					"name": "Add Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion -1 Check status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"var AddSkillschema = {\r",
									"    \"type\": \"object\",\r",
									"         \"success\": { \"type\": \"boolean\" },\r",
									"        \"id\": { \"type\": \"string\" }\r",
									"    };\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(AddSkillschema);\r",
									"});\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"//Assertion - Validate add Skill\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode == 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: Skill added successfully\r",
									"pm.test(\"Skill added successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"pm.environment.set(\"SkillId\", response.id);\r",
									"})\r",
									"   }\r",
									"   else if (message == \"This skill is already exist in your skill list.\") {\r",
									"   // Negative case: skill already exists\r",
									" pm.test(\"Duplicate skill\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"This skill is already exist in your skill list.\");\r",
									"});\r",
									"\t}\r",
									"\t} else if (statusCode == 401) {\r",
									"// Unauthorized: unable to add skill without authentication\r",
									"pm.test(\"Unable to add skill without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									"Â });\r",
									"} "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"PersonSkillId\": 0,\r\n  \"Skill\": \"Skill5\",\r\n  \"ExperienceLevel\": \"Beginner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ProfileUrl}}/addSkill",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"addSkill"
							]
						}
					},
					"response": [
						{
							"name": "Add Skill",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": 0,\r\n  \"Skill\": \"Skill3\",\r\n  \"ExperienceLevel\": \"Beginner\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/addSkill",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"addSkill"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Duplicate Add Skill",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": 0,\r\n  \"Skill\": \"Skill2\",\r\n  \"ExperienceLevel\": \"Beginner\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/addSkill",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"addSkill"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Negative Add Skill",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": 0,\r\n  \"Skill\": \"\",\r\n  \"ExperienceLevel\": \"Choose Skill Level\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/addSkill",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"addSkill"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Skill with special character",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": 0,\r\n  \"Skill\": \"!@##$$%^\",\r\n  \"ExperienceLevel\": \"Expert\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/addSkill",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"addSkill"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Skill with numbers",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": 0,\r\n  \"Skill\": \"1234567\",\r\n  \"ExperienceLevel\": \"Expert\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/addSkill",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"addSkill"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Update Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion-1 check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var UpdatedSkillschema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\" },\r",
									"        \"id\": { \"type\": \"string\" }\r",
									"    },\r",
									"};\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(UpdatedSkillschema);\r",
									"});\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\t\t\t\t\t\t\t\t\r",
									"// Assertion -2 Validate skill update success or failure\r",
									"var statusCode = pm.response.code;\r",
									"var response = pm.response.json();\r",
									"if (statusCode === 200) {\r",
									"var message = response.message;\r",
									"if (response.success === true) {\r",
									"pm.test(\"Validate Updated Skill Successfully\", function () {\r",
									"\t  pm.expect(response.success).to.be.true;\r",
									"      pm.environment.get(\"skillid\"); \r",
									"});\r",
									"\t} \r",
									"// Assertion -3 Duplicate skill\r",
									"else if (message === \"This skill is already added to your skill list.\") {\r",
									"\tpm.test(\"Validate Duplicate Skill\", function () {\r",
									"\tpm.expect(response.success).to.be.false;\r",
									"pm.expect(response.message).to.equal(\"This skill is already added to your skill list.\");\r",
									"});\r",
									"    } \r",
									"// Assertion -4 while adding new skill Error\r",
									"else if (message === \"Error while adding new skill '' is not a valid 24 digit hex string.\") \r",
									"   {\r",
									"      pm.test(\"Unable to Update Skill without ID\", function () {\r",
									"\t  pm.expect(response.success).to.be.false;\r",
									"\t  pm.expect(response.message).to.equal(\"Error while adding new skill '' is not a valid 24 digit hex string.\");\r",
									"});\r",
									"\t}\r",
									"}\r",
									"\t\t\t\t\t\t\t\t\t\r",
									"// Assertion -5 Unable to update skill without authentication\r",
									"\tif (statusCode === 401) {\r",
									"pm.test(\"Unable to Update Skill without User being Authenticated\", function () {\r",
									"   pm.expect(pm.response.body).to.be.undefined;\r",
									"});\r",
									"Â Â Â Â }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"PersonSkillId\": \"{{SkillId}}\",\r\n  \"Skill\": \"Skill11\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ProfileUrl}}/updateSkill",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"updateSkill"
							]
						}
					},
					"response": [
						{
							"name": "Update Skill",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": \"{{SkillId}}\",\r\n  \"Skill\": \"Skill111\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateSkill",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateSkill"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Duplicate Update Skill",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": \"{{SkillId}}\",\r\n  \"Skill\": \"Skill111\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateSkill",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateSkill"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Negative Update Skill",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": \"{{SkillId}}\",\r\n  \"Skill\": \"\",\r\n  \"ExperienceLevel\": \"Skill Level\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateSkill",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateSkill"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Update Skill with special character",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": \"{{SkillId}}\",\r\n  \"Skill\": \"!@#$%^&\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateSkill",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateSkill"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Update Skill with numbers",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PersonSkillId\": \"{{SkillId}}\",\r\n  \"Skill\": \"11223344\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateSkill",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateSkill"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Get Skill list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion-Check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var getlistskill = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"personSkillId\": { \"type\": \"string\" },\r",
									"            \"skill\": { \"type\": \"string\" },\r",
									"            \"experienceLevel\": { \"type\": \"string\" }\r",
									"        },\r",
									"    }\r",
									"};\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate SkillListSchema\", () => {\r",
									"            pm.response.to.have.jsonSchema(getlistskill);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"// Assertion - Validate successful retrieval of skill list\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode == 200) {\r",
									"    pm.test(\"Retrieve list of skill successfully\", function () {\r",
									"        var response = pm.response.json();\r",
									"        pm.expect(response).to.be.an('array');\r",
									"    });\r",
									"} else if (statusCode == 401) {\r",
									"    // Unauthorized: unable to retrieve skill list without authentication\r",
									"    pm.test(\"Unable to retrieve skill without authentication\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"Â Â Â Â });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ProfileUrl}}/getSkill",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"getSkill"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion - Check status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const DeleteSkillSchema ={\r",
									"\"type\": \"object\",\r",
									"       \"success\": {\"type\": \"boolean\"},\r",
									"       \"skill\":{\"type\":\"string\"},        \r",
									"};\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(DeleteSkillSchema);\r",
									"}); \r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"// Assertion - Validate skill deletion success\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    pm.test(\"skill deleted successfully\", function () {\r",
									"        var response = pm.response.json();\r",
									"        pm.expect(response.success).to.be.true;\r",
									"        pm.expect(response.skill).to.not.be.empty;\r",
									"        \r",
									"    });\r",
									"}\r",
									"else {\r",
									"    var response = pm.response.json(); // Define response here to avoid ReferenceError\r",
									"    if (response.message === \"Error while deleting skill Object reference not set to an instance of an object.\") {\r",
									"        pm.test(\"Negative Delete skill\", function () {\r",
									"            pm.expect(response.success).to.be.false;\r",
									"            pm.expect(response.message).to.equal(\"Error while deleting skill Object reference not set to an instance of an object.\");\r",
									"        });\r",
									"    }\r",
									"}\r",
									"// Assertion - Unable to delete skill without authentication\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"Unable to Delete skill without User being Authenticated\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"    });\r",
									"}\r",
									"// Assertion - Negative cases for invalid and empty ID\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\"Negative - Delete skill Invalid Id\", function () {\r",
									"        pm.response.to.have.status(500);\r",
									"    });\r",
									"                    \r",
									"    pm.test(\"Negative - Delete skill Empty Id Field\", function () {\r",
									"        pm.response.to.have.status(500);\r",
									"Â Â Â Â });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"PersonSkillId\": \"{{SkillId}}\",\r\n  \"Skill\": \"Skill111\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ProfileUrl}}/deleteSkill",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"deleteSkill"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Certifications API",
			"item": [
				{
					"name": "Add Certification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion -1 Check status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"var AddCertificationschema = {\r",
									"    \"type\": \"object\",\r",
									"         \"success\": { \"type\": \"boolean\" },\r",
									"        \"id\": { \"type\": \"string\" }\r",
									"    };\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(AddCertificationschema);\r",
									"});\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"//Assertion - Validate add Certification\r",
									"var statusCode = pm.response.code;\r",
									"\tif (statusCode == 200) {\r",
									" var response = pm.response.json();\r",
									"\tvar success = response.success;\r",
									"\tvar message = response.message;\r",
									"\t\t\t\t\t\t\t\t\t    \r",
									"if (success) {\r",
									"// Positive case: Certification added successfully\r",
									"pm.test(\"Certification added successfully\", function () {\r",
									"pm.expect(success).to.be.true;\r",
									"pm.environment.set(\"CertificationId\", response.id);\r",
									"})\r",
									"   }\r",
									"   else if (message == \"This Certification is already exist in your Certification list.\") {\r",
									"   // Negative case: Certification already exists\r",
									" pm.test(\"Duplicate Certification\", function () {\r",
									"\t pm.expect(success).to.be.false;\r",
									"pm.expect(message).to.equal(\"This Certification is already exist in your Certification list.\");\r",
									"});\r",
									"\t}\r",
									"\t} else if (statusCode == 401) {\r",
									"// Unauthorized: unable to add Certification without authentication\r",
									"pm.test(\"Unable to add Certification without authentication\", function () {\r",
									"pm.expect(pm.response.body).to.be.undefined;\r",
									"Â });\r",
									"} "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"certificationName\": \"C2\",\r\n  \"certificationFrom\": \"A1\",\r\n  \"certificationYear\": \"2020\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ProfileUrl}}/addCertification",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"addCertification"
							]
						}
					},
					"response": [
						{
							"name": "Add Certifications",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"certificationName\": \"C3\",\r\n  \"certificationFrom\": \"A1\",\r\n  \"certificationYear\": \"2021\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/addCertification",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"addCertification"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Duplicate Add Certifications",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"certificationName\": \"C2\",\r\n  \"certificationFrom\": \"A1\",\r\n  \"certificationYear\": \"2020\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/addCertification",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"addCertification"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Negative Add Certifications",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"certificationName\": \"\",\r\n  \"certificationFrom\": \"\",\r\n  \"certificationYear\": \"Year\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/addCertification",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"addCertification"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Certifications with special character",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"certificationName\": \"!@@\",\r\n  \"certificationFrom\": \"%$%%%#\",\r\n  \"certificationYear\": \"2020\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/addCertification",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"addCertification"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Add Certifications with numbers",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"certificationName\": \"111\",\r\n  \"certificationFrom\": \"555\",\r\n  \"certificationYear\": \"2020\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/addCertification",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"addCertification"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Update Certification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion-1 check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var UpdatedCertificationSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"success\": { \"type\": \"boolean\" },\r",
									"   };\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(UpdatedCertificationSchema);\r",
									"});\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\t\t\t\t\t\t\t\t\r",
									"// Assertion -2 Validate certification update success or failure\r",
									"var statusCode = pm.response.code;\r",
									"var response = pm.response.json();\r",
									"if (statusCode === 200) {\r",
									"var message = response.message;\r",
									"if (response.success === true) {\r",
									"pm.test(\"Validate Updated Certification Successfully\", function () {\r",
									"\t  pm.expect(response.success).to.be.true;\r",
									"      pm.environment.get(\"CertificationId\"); \r",
									"});\r",
									"\t} \r",
									"// Assertion -3 Duplicate Certification\r",
									"else if (message === \"This Certification is already added to your Certification list.\") {\r",
									"\tpm.test(\"Validate Duplicate Certification\", function () {\r",
									"\tpm.expect(response.success).to.be.false;\r",
									"pm.expect(response.message).to.equal(\"This Certification is already added to your Certification list.\");\r",
									"});\r",
									"    } \r",
									"// Assertion -4 while adding new Certification Error\r",
									"else if (message === \"Error while adding new Certification '' is not a valid 24 digit hex string.\") \r",
									"   {\r",
									"      pm.test(\"Unable to Update Certification without ID\", function () {\r",
									"\t  pm.expect(response.success).to.be.false;\r",
									"\t  pm.expect(response.message).to.equal(\"Error while adding new Certification '' is not a valid 24 digit hex string.\");\r",
									"});\r",
									"\t}\r",
									"}\r",
									"\t\t\t\t\t\t\t\t\t\r",
									"// Assertion -5 Unable to update Certification without authentication\r",
									"\tif (statusCode === 401) {\r",
									"pm.test(\"Unable to Update Certification without User being Authenticated\", function () {\r",
									"   pm.expect(pm.response.body).to.be.undefined;\r",
									"});\r",
									"Â Â Â Â }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{CertificationId}}\",\r\n  \"certificationName\": \"C11\",\r\n  \"certificationFrom\": \"A1\",\r\n  \"certificationYear\": \"2020\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ProfileUrl}}/updateCertification",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"updateCertification"
							]
						}
					},
					"response": [
						{
							"name": "Update Certifications",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{CertificationId}}\",\r\n  \"certificationName\": \"C111\",\r\n  \"certificationFrom\": \"A11\",\r\n  \"certificationYear\": \"2020\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateCertification",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateCertification"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Duplicate Update Certifications",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{CertificationId}}\",\r\n  \"certificationName\": \"C111\",\r\n  \"certificationFrom\": \"A11\",\r\n  \"certificationYear\": \"2020\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateCertification",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateCertification"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Negative Update Certifications",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{CertificationId}}\",\r\n  \"certificationName\": \"\",\r\n  \"certificationFrom\": \"\",\r\n  \"certificationYear\": \"Year\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateCertification",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateCertification"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Update Certifications with specialcharacter",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{CertificationId}}\",\r\n  \"certificationName\": \"!@#$%^&\",\r\n  \"certificationFrom\": \"@@#$%\",\r\n  \"certificationYear\": \"2020\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateCertification",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateCertification"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Update Certifications with numbers",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"id\": \"{{CertificationId}}\",\r\n  \"certificationName\": \"12345\",\r\n  \"certificationFrom\": \"1122\",\r\n  \"certificationYear\": \"2020\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{ProfileUrl}}/updateCertification",
									"host": [
										"{{ProfileUrl}}"
									],
									"path": [
										"updateCertification"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Get Certification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion-Check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var getlistCertification = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"certificationName\": { \"type\": \"string\" },\r",
									"            \"certificationFrom\": { \"type\": \"string\" },\r",
									"            \"certificationYear\": { \"type\": \"integer\" }\r",
									"        },\r",
									"    }\r",
									"};\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate CertificationListSchema\", () => {\r",
									"            pm.response.to.have.jsonSchema(getlistCertification);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"// Assertion - Validate successful retrieval of certification list\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode == 200) {\r",
									"    pm.test(\"Retrieve list of certification successfully\", function () {\r",
									"        var response = pm.response.json();\r",
									"        pm.expect(response).to.be.an('array');\r",
									"    });\r",
									"} else if (statusCode == 401) {\r",
									"    // Unauthorized: unable to retrieve certification list without authentication\r",
									"    pm.test(\"Unable to retrieve certification without authentication\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"Â Â Â Â });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ProfileUrl}}/getCertification",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"getCertification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Certification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion - Check status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const DeleteCertificationSchema ={\r",
									"\"type\": \"object\",\r",
									"       \"success\": {\"type\": \"boolean\"},\r",
									"       \"certificationName\":{\"type\":\"string\"},        \r",
									"};\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(DeleteCertificationSchema);\r",
									"}); \r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"// Assertion - Validate certification deletion success\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    pm.test(\"certification deleted successfully\", function () {\r",
									"        var response = pm.response.json();\r",
									"        pm.expect(response.success).to.be.true;\r",
									"        pm.expect(response.certificationName).to.not.be.empty;\r",
									"        \r",
									"    });\r",
									"}\r",
									"else {\r",
									"    var response = pm.response.json(); // Define response here to avoid ReferenceError\r",
									"    if (response.message === \"Error while deleting skill Object reference not set to an instance of an object.\") {\r",
									"        pm.test(\"Negative Delete certification\", function () {\r",
									"            pm.expect(response.success).to.be.false;\r",
									"            pm.expect(response.message).to.equal(\"Error while deleting certification Object reference not set to an instance of an object.\");\r",
									"        });\r",
									"    }\r",
									"}\r",
									"// Assertion - Unable to delete certification without authentication\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"Unable to Delete certification without User being Authenticated\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"    });\r",
									"}\r",
									"// Assertion - Negative cases for invalid and empty ID\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\"Negative - Delete certification Invalid Id\", function () {\r",
									"        pm.response.to.have.status(500);\r",
									"    });\r",
									"                    \r",
									"    pm.test(\"Negative - Delete certification Empty Id Field\", function () {\r",
									"        pm.response.to.have.status(500);\r",
									"Â Â Â Â });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{CertificationId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ProfileUrl}}/deleteCertification",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"deleteCertification"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Manage Listing",
			"item": [
				{
					"name": "Add Listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion -1 Check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var AddListingschema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\" },\r",
									"        \"editFlag\": { \"type\": \"boolean\" },\r",
									"        \"id\": { \"type\": \"string\" }\r",
									"    },\r",
									"};\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(AddListingschema);\r",
									"});\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    if (response.success === true) {\r",
									"        pm.test(\"Validate - Successfully Add Listing\", function () {\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.expect(response.success).to.be.true;\r",
									"            pm.environment.set(\"ListingId\", response.id);\r",
									"            pm.expect(response.editFlag).to.exist;\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(\"Validate - Unsuccessful Add Listing\", function () {\r",
									"            pm.expect.fail(\"Listing addition was not successful\");\r",
									"        });\r",
									"    }\r",
									"} else if (statusCode === 500 || statusCode === 401) {\r",
									"    var errorMessage = {\r",
									"        500: \"Internal Server Error\",\r",
									"        401: \"User is not Authenticated\"\r",
									"    };\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"Manual testing and Automation testing\",\r\n  \"description\": \"I am good at manual and automation testing.\",\r\n  \"categoryId\": \"6\",\r\n  \"subcategoryId\": \"2\",\r\n  \"tags\": [\r\n    {\r\n      \"id\": \"as\",\r\n      \"text\": \"as\"\r\n    }\r\n  ],\r\n  \"serviceType\": 0,\r\n  \"locationType\": 1,\r\n  \"availability\": {\r\n    \"startDate\": \"2024-04-18\",\r\n    \"endDate\": \"2024-04-30\",\r\n    \"dayEntries\": [\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"08:40\",\r\n        \"EndTime\": \"10:40\",\r\n        \"Available\": true\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      }\r\n    ]\r\n  },\r\n  \"skillTrade\": [\r\n    {\r\n      \"id\": \"dff\",\r\n      \"text\": \"dff\"\r\n    }\r\n  ],\r\n  \"isTradable\": true,\r\n  \"charge\": 0,\r\n  \"credentials\": true,\r\n  \"isActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ListingUrl}}/addListing",
							"host": [
								"{{ListingUrl}}"
							],
							"path": [
								"addListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MultipleServiceListing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Aessertion -1 Check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var ValidateListingschema = {\r",
									"    \"default\": {},\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"success\": { \"type\": \"boolean\" },\r",
									"            \"data\": { \"type\": \"array\" },\r",
									"            \"count\": { \"type\": \"integer\" }\r",
									"        },\r",
									"    }\r",
									"};\r",
									"pm.test(\"Validate get Listing schema\", () => {\r",
									"pm.response.to.have.jsonSchema(ValidateListingschema);\r",
									"});\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"// Assertion-Validate the response while retrieving service listings.\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    if (response.success === true) {\r",
									"        pm.test(\"Validate- Get Multiple Service Listing Successfully\", function () {\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.expect(response.success).to.be.true;\r",
									"            pm.expect(response.data).to.be.an('array');\r",
									"            pm.expect(response.count).to.exist;\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"if (statusCode == 500) {\r",
									"     pm.test(\"Unable to Get Multiple Service Listings due to Internal Server Error\", function () {\r",
									"        pm.expect.fail(\"Internal Server Error\");\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode == 401) {\r",
									"     pm.test(\"Unable to Get Multiple Service Listings because user is not Authenticated\", function () {\r",
									"        pm.expect.fail(\"User is not Authenticated\");\r",
									"Â Â Â Â });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"offset\": 0,\r\n  \"limit\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ListingUrl}}/getMultipleServiceListing",
							"host": [
								"{{ListingUrl}}"
							],
							"path": [
								"getMultipleServiceListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Listing by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion-1 Check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var Validategetserviceschema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\"},\r",
									"        \"serviceListing\": {\"type\": \"object\"},\r",
									"        \"categoryTuple\":{\"type\":\"object\"},\r",
									"        \"currentUserId\":{\"type\":\"string\"},\r",
									"        \"id\":{\"type\":\"string\"},\r",
									"        \"sellerId\": {\"type\": \"string\"},\r",
									"         \"charge\":{\"type\":\"number\"},\r",
									"         \"title\":{\"type\": \"string\"},\r",
									"         \"description\":{\"type\": \"string\"},\r",
									"         \"serviceType\":{\"type\":\"integer\"},\r",
									"         \"locationType\":{\"type\":\"integer\"},\r",
									"         \"availability\":{\"type\": \"object\"},\r",
									"         \"workSample\":{\"type\":\"null\"},\r",
									"         \"categoryId\":{\"type\":\"integer\"},\r",
									"         \"subcategoryId\":{\"type\":\"integer\"},\r",
									"         \"tags\":{\"type\":\"array\"},\r",
									"         \"comments\":{\"type\":\"null\"},\r",
									"         \"ratings\":{\"type\":\"null\"},\r",
									"         \"ratingAverages\":{\"type\":\"null\"},\r",
									"         \"ratingTotalsAndCounts\":{\"type\":\"null\"},\r",
									"         \"skillTrade\":{\"type\":\"array\"},\r",
									"         \"isTradable\":{\"type\":\"boolean\"},\r",
									"         \"isActive\":{\"typr\":\"boolean\"},\r",
									"         \"createdOn\":{\"type\":\"string\"},\r",
									"         \"createdBy\":{\"type\":\"string\"},\r",
									"         \"updatedOn\":{\"type\":\"string\"},\r",
									"         \"updatedBy\":{\"type\":\"null\"},\r",
									"         \"isDeleted\":{\"type\":\"boolean\"},\r",
									"    }\r",
									"   \r",
									"};\r",
									"    \r",
									"pm.test(\"Validate get Listing schema\", () => {\r",
									"pm.response.to.have.jsonSchema(Validategetserviceschema);\r",
									"});\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"//Assertion-2 Validate the response while retrieving the service by ID\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    if (response.success === true) {\r",
									"        pm.test(\"Validate - Get listings by ID Successfully\", function () {\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.expect(response.success).to.be.true;\r",
									"            pm.expect(response.serviceListing).to.be.an('object');\r",
									"            pm.expect(response.categoryTuple).to.be.an('object');\r",
									"            pm.expect(response.currentUserId).to.exist;\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(\"Unable to Get Service\", function () {\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.expect(response.success).to.be.false;\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"if (statusCode === 401) {\r",
									"     pm.test(\"Unable to Get Service listing because user is not Authenticated\", function () {\r",
									"        pm.expect.fail(\"User is not Authenticated\");\r",
									"Â Â Â Â });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ListingUrl}}/getService/?id={{ListingId}}",
							"host": [
								"{{ListingUrl}}"
							],
							"path": [
								"getService",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{ListingId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var validategetbalanceschema = {\r",
									"    \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\"},\r",
									"        \"balance\": {\"type\": \"number\"},\r",
									"        }\r",
									"};\r",
									"pm.test(\"Validate get balance schema\", () => {\r",
									"pm.response.to.have.jsonSchema(validategetbalanceschema);\r",
									"});\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"// Parse the response JSON\r",
									"var responseData = pm.response.json();\r",
									"\r",
									"// Check if the request was successful and if the balance is correct\r",
									"if (responseData.success === true) {\r",
									"    pm.test(\"Verify Balance\", function () {\r",
									"        pm.expect(responseData.success).to.be.true;\r",
									"        pm.expect(responseData.balance).to.equal(100.0);\r",
									"    });\r",
									"} else {\r",
									"    // If the request was not successful, fail the test\r",
									"    pm.test(\"Request was not successful\", function () {\r",
									"        pm.expect.fail(\"Request was not successful\");\r",
									"Â Â Â Â });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ListingUrl}}/getBalance",
							"host": [
								"{{ListingUrl}}"
							],
							"path": [
								"getBalance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Toggle Active",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion - Check status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var ValidateToggleSchema = {\r",
									"    \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\"},\r",
									"        \"active\": {\"type\": \"boolean\"},\r",
									"        }\r",
									"};\r",
									"pm.test(\"Validate get Toggle schema\", () => {\r",
									"pm.response.to.have.jsonSchema(ValidateToggleSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"// Assertion-Validate the response while active and disable the Toggles.\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode == 200) {\r",
									"    var response = pm.response.json();\r",
									"    if (response.success == true) {\r",
									"        if (response.active == true) {\r",
									"            pm.test(\"Validate - Toggle is active\", function () {\r",
									"                pm.response.to.have.status(200);\r",
									"                pm.expect(response.success).to.be.true;\r",
									"                pm.expect(response.active).to.be.true;\r",
									"            });\r",
									"        } else {\r",
									"            pm.test(\"Validate - Toggle is Disabled\", function () {\r",
									"                pm.response.to.have.status(200);\r",
									"                pm.expect(response.success).to.be.true;\r",
									"                pm.expect(response.active).to.be.false;\r",
									"            });\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"if (statusCode == 500) {\r",
									"    pm.test(\"Unable to Send Trade Request because of an Internal Server Error\", function () {\r",
									"        var response = pm.response.body;\r",
									"        pm.expect(response).to.be.undefined();\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode == 401) {\r",
									"    pm.test(\"Unable to Send Trade Request because user is not Authenticated\", function () {\r",
									"        var response = pm.response.body;\r",
									"        pm.expect(response).to.be.undefined();\r",
									"Â Â Â Â });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"{{ListingId}}\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ListingUrl}}/toggleIsActive",
							"host": [
								"{{ListingUrl}}"
							],
							"path": [
								"toggleIsActive"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Worksamples",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion -1 check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var validateWorksampleSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\"},\r",
									"        \"defaultImg\": {\"type\": \"string\"},\r",
									"    }\r",
									"};\r",
									"pm.test(\"Validate WorkSmaple schema\", () => {\r",
									"pm.response.to.have.jsonSchema(validateWorksampleSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"// Parse response body as JSON\r",
									"var responseBody = pm.response.json();\r",
									"// Check if success is false\r",
									"if (responseBody.success === false) {\r",
									"    // Log default image URL\r",
									"    console.log(\"Default Image URL:\", responseBody.defaultImg);\r",
									"} else {\r",
									"    // Check the success response\r",
									"    console.log(\"Success:\", responseBody.success);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"{{ListingId}}\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ListingUrl}}/getWorkSample/?id={{ListingId}}",
							"host": [
								"{{ListingUrl}}"
							],
							"path": [
								"getWorkSample",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "{{ListingId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion -1 Check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var Validatecategoriesserviceschema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\"},\r",
									"        \"categories\": {\"type\": \"array\"},\r",
									"        \"id\":{\"type\":\"string\"},\r",
									"        \"value\":{\"type\":\"string\"},\r",
									"        \"name\":{\"type\":\"string\"},\r",
									"        \"subcategory\": {\"type\": \"array\"},\r",
									"         \"isDeleted\":{\"type\":\"boolean\"},\r",
									"        }\r",
									"};\r",
									"pm.test(\"Validate the Categories schema\", () => {\r",
									"pm.response.to.have.jsonSchema(Validatecategoriesserviceschema);\r",
									"});\r",
									" pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});       \r",
									"// Assertion: Validate the response while getting all category listings.\r",
									"var statusCode = pm.response.code;\r",
									"var responseBody = pm.response.json();\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    if (response.success === true) {\r",
									"        pm.test(\"Successfully Get Categories\", function () {\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.expect(response.success).to.be.true;\r",
									"            pm.expect(response.categories).to.be.an('array');\r",
									"        });\r",
									"    }\r",
									"}\r",
									" else {\r",
									"    // check the category failure response\r",
									"    console.log(\"SuccessÂ isÂ false\");\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{ListingUrl}}/getCategories",
							"host": [
								"{{ListingUrl}}"
							],
							"path": [
								"getCategories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Listing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion -1 check for the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var validatedeletelistingschema = {\r",
									"    \"item\" : {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\":{\r",
									"       \"success\":{\"type\":\"boolean\"},\r",
									"       \"title\":{\"type\":\"string\"},\r",
									"    }\r",
									"    }\r",
									"};\r",
									"pm.test(\"validate the delete servicelisting schema\", () => {\r",
									"pm.response.to.have.jsonSchema(validatedeletelistingschema);\r",
									"});\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"// Assertion - Check the response while delete listings\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    if (response.success === true) {\r",
									"        pm.test(\"Validate - Successfully Deleted Listing\", function () {\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.expect(response.success).to.be.true;\r",
									"            pm.expect(response.title).to.exist;\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"if (statusCode === 500) {\r",
									"    pm.test(\"Unable to Delete Listing because of an Internal Server Error\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"Unable to Delete Listing because user is not Authenticated\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"Â Â Â Â });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"{{ListingId}}\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ListingUrl}}/deleteServiceListing",
							"host": [
								"{{ListingUrl}}"
							],
							"path": [
								"deleteServiceListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion -1 Check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var AddDescriptionschema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\" },\r",
									"        \"message\":{\"type\":\"string\"},\r",
									"    }\r",
									"};\r",
									"// Assertion - Validate JSON Schema\r",
									"pm.test(\"Validate AddDescription schema\", () => {\r",
									"pm.response.to.have.jsonSchema(AddDescriptionschema);\r",
									"});\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"//Assertion -2 Validate the added Description\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    pm.test(\"Successfully Added Profile Description\", function () {\r",
									"        var response = pm.response.json();\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.expect(response.message).to.equal(\"Description Updated Successfully\");\r",
									"        pm.expect(response.success).to.be.true;\r",
									"    });\r",
									"}\r",
									"\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"Unable to Add Info because user is not Authenticated\", function () {\r",
									"        var response = pm.response.json();\r",
									"        pm.expect(response).to.eql({});\r",
									"Â Â Â Â });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"personId\": 0,\r\n  \"description\": \"Happy to share my knowledge\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ProfileUrl}}/addInfo",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"addInfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Profile Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion -1 Check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Parse the response JSON\r",
									"var responseBody = pm.response.json();\r",
									"\r",
									"// Test cases for different fields in the response\r",
									"pm.test(\"Response contains 'success' field\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"success\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'enableEdit' field\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"enableEdit\", true);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'firstName' field\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"firstName\", \"Jit1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'lastName' field\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"lastName\", \"bug\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'availability' object\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"availability\").that.is.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'languages' array\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"languages\").that.is.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'skills' array\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"skills\").that.is.an(\"array\").and.has.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'educations' array\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"educations\").that.is.an(\"array\").and.has.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'certifications' array\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"certifications\").that.is.an(\"array\").and.has.lengthOf.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'profilePhoto' object\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"profilePhoto\").that.is.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains 'description' object\", function () {\r",
									"    pm.expect(responseBody).to.have.property(\"description\").that.is.an(\"object\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ProfileUrl}}/getProfileDetails/?id=",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"getProfileDetails",
								""
							],
							"query": [
								{
									"key": "id",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notification API",
			"item": [
				{
					"name": "New Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion - Check status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"var validateNewNotificationSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"success\": { \"type\": \"boolean\"},\r",
									"        \"noOfNotification\": {\"type\": \"integer\"},\r",
									"        \"noOfMessages\": {\"type\": \"integer\"},\r",
									"\r",
									"    }\r",
									"};\r",
									"pm.test(\"Validate New Notification schema\", () => {\r",
									"pm.response.to.have.jsonSchema(validateNewNotificationSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"// Assertion - Validate the response while retrieving notification count.\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    if (response.success === true) {\r",
									"        pm.test(\"Successfully Get New Notification Count\", function () {\r",
									"            pm.expect(pm.response.code).to.equal(200);\r",
									"            pm.expect(response.success).to.be.true;\r",
									"            pm.expect(response.noOfNotification).to.exist;\r",
									"            pm.expect(response.noOfMessages).to.exist;\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									"if (statusCode === 401) {\r",
									"    pm.test(\"Unable to Get Notification Count because user is not Authenticated\", function () {\r",
									"        var response = pm.response.body;\r",
									"        pm.expect(response).to.be.undefined;\r",
									"Â Â Â Â });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{NotificationId}}/getNewNotificationCount",
							"host": [
								"{{NotificationId}}"
							],
							"path": [
								"getNewNotificationCount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate get Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var validategetNotificationschema = {\r",
									"    \"items\": {\r",
									"        \"type\":\"object\",\r",
									"        \"properties\":{\r",
									"            \"success\":{\"type\":\"boolean\"},\r",
									"            \"userNotifications\":{\"type\":\"array\"},\r",
									"            \"id\":{\"type\":\"string\"},\r",
									"            \"name\":{\"type\":\"string\"},\r",
									"            \"url\":{\"type\":\"string\"},\r",
									"            \"message\":{\"type\":\"string\"},\r",
									"            \"isViewed\":{\"type\":\"boolean\"},\r",
									"            \"updatedOn\":{\"type\":\"string\"},\r",
									"            \"notificationType\":{\"type\":\"integer\"},\r",
									"            \"icon\":{\"type\":\"string\"},\r",
									"            \"totalCount\":{\"type\":\"integer\"},\r",
									"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"pm.test(\"Validate the get Notification schema\", () => {\r",
									"pm.response.to.have.jsonSchema(validategetNotificationschema);\r",
									"});\r",
									"pm.test(\"status code has a string \" , function(){\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is present\", () => {\r",
									"        pm.response.to.have.header(\"Content-Type\");\r",
									"    });\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
									"});\r",
									"\r",
									"pm.test(\"Server header is Kestrel\", () => {\r",
									"    pm.expect(pm.response.headers.get('Server')).to.eql('Kestrel');\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    if (response.success === true) {\r",
									"        pm.test(\"Successfully Load More Notifications\", function () {\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.expect(response.success).to.be.true;\r",
									"            pm.expect(response.userNotifications).to.be.an('array');\r",
									"            pm.expect(response.totalCount).to.exist;\r",
									"        });\r",
									"    }\r",
									"} else if (statusCode === 401) {\r",
									"     pm.test(\"Unable to Load More Notifications because user is not Authenticated\", function () {\r",
									"        var response = pm.response.body;\r",
									"        pm.expect(response).to.be.undefined();\r",
									"Â Â Â Â });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{NotificationId}}/getNotification?numberOfNotifications=5",
							"host": [
								"{{NotificationId}}"
							],
							"path": [
								"getNotification"
							],
							"query": [
								{
									"key": "numberOfNotifications",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion -1 Check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// Assertion: Validate the response when given notification number.\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    pm.test(\"Successfully Read All Notification\", function () {\r",
									"        var response = pm.response.json();\r",
									"        pm.response.to.have.status(200);\r",
									"        pm.expect(response.success).to.be.true;\r",
									"    });\r",
									"}\r",
									" else if (statusCode === 401) {\r",
									"    pm.test(\"Unable to Read All Notifications because user is not Authenticated\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Unhandled status code\", function () {\r",
									"        pm.expect.fail(\"Unhandled status code: \" + statusCode);\r",
									"Â Â Â Â });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{NotificationId}}/readMarkedNotifications",
							"host": [
								"{{NotificationId}}"
							],
							"path": [
								"readMarkedNotifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Notification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion: Check status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Assertion: Validate the response while deleting marked notifications\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    if (response.success === true) {\r",
									"        pm.test(\"Successfully Remove Marked Notifications\", function () {\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.expect(response.success).to.be.true;\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(\"Unable to Remove Marked Notifications\", function () {\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.expect(response.success).to.be.false;\r",
									"            pm.expect(response.message).to.exist;\r",
									"        });\r",
									"    }\r",
									"} else if (statusCode === 401) {\r",
									"    pm.test(\"Unable to Remove Marked Notification because user is not Authenticated\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Unhandled status code\", function () {\r",
									"        pm.expect.fail(\"Unhandled status code: \" + statusCode);\r",
									"Â Â Â Â });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{NotificationId}}/removeMarkedNotifications",
							"host": [
								"{{NotificationId}}"
							],
							"path": [
								"removeMarkedNotifications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chat API",
			"item": [
				{
					"name": "Get First ChatRoom",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Assertion: Check status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Assertion: Validate the first chat room\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    if (response.success === true) {\r",
									"        pm.test(\"Successfully Get The First Chatroom\", function () {\r",
									"            pm.response.to.have.status(200);\r",
									"            pm.expect(response.success).to.be.true;\r",
									"            pm.expect(response).to.have.keys('success', 'chatroom', 'myCurrentUser');\r",
									"        });\r",
									"    }\r",
									"} else if (statusCode === 401) {\r",
									"    pm.test(\"Unable to Get First Chatroom because user is not Authenticated\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Unhandled status code\", function () {\r",
									"        pm.expect.fail(\"Unhandled status code: \" + statusCode);\r",
									"Â Â Â Â });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ProfileUrl}}/getFirstChatroom",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"getFirstChatroom"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate ChatRoom details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Assertion -1 Check the status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var response = pm.response.json();\r",
									"    if (response.success === true) {\r",
									"        pm.test(\"Successfully Get Chat Room Details\", function () {\r",
									"            pm.expect(pm.response).to.have.status(200);\r",
									"            pm.expect(response.success).to.be.true;\r",
									"            pm.expect(response.result).to.be.an('array');\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(\"Get Chat Room details Unsuccessful\", function () {\r",
									"            pm.expect(pm.response).to.have.status(200);\r",
									"            pm.expect(response.success).to.be.false;\r",
									"            pm.expect(response.message).to.equal(\"Error while retrieving chatroom details\");\r",
									"        });\r",
									"    }\r",
									"} else if (statusCode === 401) {\r",
									"    pm.test(\"Unable to Get Chat Room Details because user is not Authenticated\", function () {\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(\"Unhandled status code\", function () {\r",
									"        pm.expect.fail(\"Unhandled status code: \" + statusCode);\r",
									"Â Â Â Â });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"UserIdToList\": [\r\n    \"65c4284d85c03a00012fe280\",\r\n    \"65f77e4ae5a2450001235753\",\r\n    \"65fa0c01f6a86d00018d669d\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ProfileUrl}}/getChatRoomDetailsList/",
							"host": [
								"{{ProfileUrl}}"
							],
							"path": [
								"getChatRoomDetailsList",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	]
}